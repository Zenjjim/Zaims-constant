{"version":3,"sources":["App/App.js","serviceWorker.js","index.js"],"names":["App","props","state","value","e","this","setState","target","console","log","classes","bull","className","bullet","Card","card","CardContent","container","Typography","title","color","gutterBottom","variant","component","pos","TextField","id","clsx","margin","textField","label","type","fullWidth","placeholder","onChange","handleChange","InputProps","startAdornment","InputAdornment","position","Math","floor","Component","withStyles","theme","width","minWidth","top","left","transform","display","fontSize","marginBottom","flexBasis","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kUAuCMA,E,YAEJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,MAAO,GAHQ,E,0EAONC,GACXC,KAAKC,SAAS,CAAEH,MAAOC,EAAEG,OAAOJ,QAChCK,QAAQC,IAAIJ,KAAKH,MAAMC,S,+BAIf,IAAD,OACCO,EAAYL,KAAKJ,MAAjBS,QACFC,EAAO,0BAAMC,UAAWF,EAAQG,QAAzB,UACb,OACE,kBAACC,EAAA,EAAD,CAAMF,UAAWF,EAAQK,MACvB,kBAACC,EAAA,EAAD,CAAaJ,UAAWF,EAAQO,WAC9B,kBAACC,EAAA,EAAD,CAAYN,UAAWF,EAAQS,MAAOC,MAAM,gBAAgBC,cAAY,GAAxE,mBAGA,kBAACH,EAAA,EAAD,CAAYI,QAAQ,KAAKC,UAAU,MAAnC,MAEGZ,EAFH,MAIGA,EAJH,IAMGA,EANH,MAQGA,EARH,QAWA,kBAACO,EAAA,EAAD,CAAYN,UAAWF,EAAQc,IAAKJ,MAAM,iBAA1C,2BAGA,6BACA,kBAACK,EAAA,EAAD,CACEC,GAAG,QACHd,UAAWe,YAAKjB,EAAQkB,OAAQlB,EAAQmB,WACxCP,QAAQ,WACRQ,MAAM,SACNC,KAAK,SACLC,WAAS,EACTC,YAAY,oBACZ9B,MAAOE,KAAKH,MAAMC,MAClB+B,SAAU,SAAC9B,GAAD,OAAO,EAAK+B,aAAa/B,IACnCgC,WAAY,CACVC,eAAgB,kBAACC,EAAA,EAAD,CAAgBC,SAAS,SAAzB,aAGE,IAArBlC,KAAKH,MAAMC,OACV,6BACE,kBAACe,EAAA,EAAD,KACE,6BACCb,KAAKH,MAAMC,MAFd,qBAIA,6BACA,kBAACe,EAAA,EAAD,KACIb,KAAKH,MAAMC,MAAM,EAAK,oBACxB,6BACCqC,KAAKC,MAAMpC,KAAKH,MAAMC,MAAM,GAAK,qB,GA/DhCuC,aAyEHC,cA1GA,SAACC,GAAD,MAAY,CACzB7B,KAAM,CACJ8B,MAAO,OACPC,SAAU,QACVP,SAAU,WACVQ,IAAK,MACLC,KAAM,MACNC,UAAW,yBAEbhC,UAAW,CACTW,OAAQ,aAEVf,OAAQ,CACNqC,QAAS,eACTtB,OAAQ,QACRqB,UAAW,cAEb9B,MAAO,CACLgC,SAAU,GACVC,aAAc,GAEhB5B,IAAK,CACH4B,aAAc,IAEhBxB,OAAQ,CACNA,OAAQ,GAEVC,UAAW,CACTwB,UAAW,IACXzB,OAAQ,KA6EGe,CAAmB3C,GCpGdsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.d2465c38.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport clsx from 'clsx';\r\n\r\nimport { Card, CardActions, CardContent, Typography, TextField, InputAdornment } from '@material-ui/core';\r\n\r\nconst styles = (theme) => ({\r\n  card: {\r\n    width: '40vw',\r\n    minWidth: '500px',\r\n    position: 'absolute',\r\n    top: '40%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n  },\r\n  container: {\r\n    margin: '20px 40px'\r\n  },\r\n  bullet: {\r\n    display: 'inline-block',\r\n    margin: '0 2px',\r\n    transform: 'scale(0.8)',\r\n  },\r\n  title: {\r\n    fontSize: 45,\r\n    marginBottom: 0,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n  margin: {\r\n    margin: 1,\r\n  },\r\n  textField: {\r\n    flexBasis: 200,\r\n    margin: 0,\r\n  },\r\n});\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: 0\r\n    }\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.setState({ value: e.target.value })\r\n    console.log(this.state.value);\r\n\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    const bull = <span className={classes.bullet}>•</span>;\r\n    return (\r\n      <Card className={classes.card}>\r\n        <CardContent className={classes.container}>\r\n          <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n            Zaim's Constant\r\n          </Typography>\r\n          <Typography variant=\"h5\" component=\"h2\">\r\n            zaa\r\n            {bull}\r\n            eim\r\n            {bull}\r\n            s\r\n            {bull}\r\n            kon\r\n            {bull}\r\n            stnt\r\n          </Typography>\r\n          <Typography className={classes.pos} color=\"textSecondary\">\r\n            Imaginary unit (₴)\r\n          </Typography>\r\n          <br />\r\n          <TextField\r\n            id=\"units\"\r\n            className={clsx(classes.margin, classes.textField)}\r\n            variant=\"outlined\"\r\n            label=\"Amount\"\r\n            type=\"number\"\r\n            fullWidth\r\n            placeholder=\"Enter total units\"\r\n            value={this.state.value}\r\n            onChange={(e) => this.handleChange(e)}\r\n            InputProps={{\r\n              startAdornment: <InputAdornment position=\"start\">₴</InputAdornment>,\r\n            }}\r\n          />\r\n          {this.state.value !== 0 &&\r\n            <div>\r\n              <Typography>\r\n                <br />\r\n                {this.state.value} 0.33l Dahls pils\r\n              </Typography>\r\n              <hr />\r\n              <Typography>\r\n                {(this.state.value%3) + \" 0.33l Dahls pils\"}\r\n                <br />\r\n                {Math.floor(this.state.value/3) + \" Toro kake\"}\r\n              </Typography>\r\n            </div>\r\n          }\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}